# Multi-stage build pour optimiser la taille finale
FROM node:20-alpine AS builder

# Installer les dépendances système nécessaires
RUN apk add --no-cache git curl

# Définir le répertoire de travail
WORKDIR /app

# Configuration npm pour améliorer la fiabilité
RUN npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-timeout 300000 && \
    npm config set registry https://registry.npmjs.org/

# Copier les fichiers de dépendances
COPY package.json package-lock.json ./
COPY tsconfig.json ./
COPY tsconfig.node.json ./
COPY vite.config.ts ./
COPY eslint.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Installer toutes les dépendances avec retry
# Essayer npm ci d'abord, sinon fallback sur npm install
RUN npm ci --prefer-offline --no-audit || \
    (echo "npm ci failed, trying npm install..." && \
     rm -rf node_modules package-lock.json && \
     npm install --no-audit)

# Copier le code source
COPY src ./src
COPY public ./public
COPY index.html ./

# Arguments de build pour la configuration de l'API
ARG VITE_API_URL=http://framboise.lan:5000/api
ENV VITE_API_URL=$VITE_API_URL

# Construire l'application
RUN npm run build

# Stage final - serveur de production léger
FROM nginx:alpine

# Métadonnées
LABEL maintainer="OP Game Team"
LABEL description="One Piece Booster Game - Frontend"
LABEL version="1.0.0"

# Installer curl pour le healthcheck
RUN apk add --no-cache curl

# Créer la configuration Nginx
RUN cat > /etc/nginx/conf.d/default.conf <<'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Gestion des erreurs 404 pour React Router
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy pour l'API backend
    location /api/ {
        proxy_pass http://framboise.lan:5000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Cache pour les assets statiques
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Sécurité
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
}
EOF

# Copier les fichiers construits
COPY --from=builder /app/dist /usr/share/nginx/html

# Exposer le port
EXPOSE 80

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Commande par défaut
CMD ["nginx", "-g", "daemon off;"]