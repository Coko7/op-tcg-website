#!/bin/sh
set -e

echo "üöÄ D√©marrage du backend One Piece Booster Game..."

# V√©rifier si la base de donn√©es existe
if [ ! -f "/app/data/database.sqlite" ]; then
  echo "üì¶ Base de donn√©es non trouv√©e. Initialisation..."

  # Ex√©cuter les migrations
  echo "üîÑ Ex√©cution des migrations..."
  node scripts/run-migrations.js

  # Initialiser les achievements
  echo "üèÜ Initialisation des achievements..."
  node scripts/init-achievements.js

  # Importer les donn√©es Vegapull (packs et cartes)
  echo "üè¥‚Äç‚ò†Ô∏è Import des donn√©es Vegapull..."
  if node dist/scripts/import-vegapull-data.js; then
    echo "‚úÖ Donn√©es Vegapull import√©es avec succ√®s!"
  else
    echo "‚ö†Ô∏è Erreur lors de l'import Vegapull (non bloquant)"
  fi

  # Migration initiale des qu√™tes depuis JSON (si le fichier existe)
  if [ -f "/app/config/world-map-quests.json" ]; then
    echo "üó∫Ô∏è Migration initiale des qu√™tes depuis JSON..."
    node dist/scripts/migrate-quests-from-json.js || echo "‚ö†Ô∏è Erreur migration qu√™tes (non bloquant)"
  else
    echo "‚ÑπÔ∏è Fichier world-map-quests.json non trouv√©, les qu√™tes seront cr√©√©es par le seed initial"
  fi

  echo "‚úÖ Initialisation termin√©e!"
else
  echo "‚úÖ Base de donn√©es existante trouv√©e"

  # Diagnostic de la base de donn√©es
  echo "üîç Diagnostic de la base de donn√©es..."
  node diagnose-database.js || echo "‚ö†Ô∏è Diagnostic √©chou√© (non bloquant)"
  echo ""

  # Ex√©cuter les migrations pour s'assurer que la DB est √† jour
  echo "üîÑ V√©rification et ex√©cution des migrations..."
  node scripts/run-migrations.js || echo "‚ö†Ô∏è Erreur lors des migrations (peut √™tre normale si d√©j√† √† jour)"

  # Correction de TOUTES les raret√©s des cartes
  echo "üé¥ V√©rification et correction de toutes les raret√©s..."
  node dist/scripts/fix-all-rarities.js || echo "‚ö†Ô∏è Erreur correction raret√©s (non bloquant)"

  # Migration des qu√™tes depuis JSON (si le fichier existe)
  if [ -f "/app/config/world-map-quests.json" ]; then
    echo "üó∫Ô∏è Migration des qu√™tes depuis JSON..."
    echo "   Fichier trouv√©: /app/config/world-map-quests.json"

    # Afficher le nombre de qu√™tes dans le JSON
    QUEST_COUNT=$(grep -o '"id":' /app/config/world-map-quests.json | wc -l)
    echo "   Qu√™tes dans le JSON: $QUEST_COUNT"

    # Ex√©cuter la migration avec sortie compl√®te
    if node dist/scripts/migrate-quests-from-json.js; then
      echo "‚úÖ Migration des qu√™tes r√©ussie!"

      # V√©rifier que les mises √† jour sont bien appliqu√©es
      echo ""
      if node scripts/verify-quest-updates.js; then
        echo ""
        echo "‚úÖ V√©rification r√©ussie: Les qu√™tes sont √† jour!"
      else
        echo ""
        echo "‚ö†Ô∏è  ATTENTION: Les qu√™tes n'ont pas les bonnes valeurs!"
        echo "   La migration s'est ex√©cut√©e mais les valeurs ne correspondent pas."
      fi
    else
      echo "‚ùå ERREUR: √âchec de la migration des qu√™tes!"
      echo "   La migration a √©chou√© mais le serveur va d√©marrer quand m√™me."
      echo "   V√©rifiez les logs ci-dessus pour plus de d√©tails."
    fi
  else
    echo "‚ö†Ô∏è ATTENTION: Fichier world-map-quests.json NON TROUV√â!"
    echo "   Chemin attendu: /app/config/world-map-quests.json"
    echo "   La migration des qu√™tes sera ignor√©e."
  fi

  # V√©rifier si les achievements existent
  ACHIEVEMENT_COUNT=$(sqlite3 /app/data/database.sqlite "SELECT COUNT(*) FROM achievements;" 2>/dev/null || echo "0")

  if [ "$ACHIEVEMENT_COUNT" = "0" ]; then
    echo "üèÜ Aucun achievement trouv√©. Initialisation..."
    node scripts/init-achievements.js
  else
    echo "‚úÖ $ACHIEVEMENT_COUNT achievements trouv√©s dans la base"
  fi

  # Importer/mettre √† jour les donn√©es Vegapull (packs et cartes)
  echo "üè¥‚Äç‚ò†Ô∏è Import/mise √† jour des donn√©es Vegapull..."
  if node dist/scripts/import-vegapull-data.js; then
    echo "‚úÖ Donn√©es Vegapull import√©es avec succ√®s!"
  else
    echo "‚ö†Ô∏è Erreur lors de l'import Vegapull (non bloquant)"
  fi
fi

# Configurer les t√¢ches cron pour les backups et le nettoyage
echo "‚è∞ Configuration des t√¢ches cron..."
sh scripts/setup-cron-backup.sh || echo "‚ö†Ô∏è Erreur configuration cron backup (non bloquant)"
sh scripts/setup-cron-cleanup.sh || echo "‚ö†Ô∏è Erreur configuration cron cleanup (non bloquant)"

# Nettoyer les fichiers temporaires et logs anciens au d√©marrage
echo "üßπ Nettoyage initial..."
node scripts/log-rotation.js || echo "‚ö†Ô∏è Erreur nettoyage initial (non bloquant)"

# Envoyer la notification de compensation (si pas d√©j√† envoy√©e)
echo "üéÅ V√©rification notification de compensation..."
node scripts/send-compensation.js || echo "‚ö†Ô∏è Erreur envoi compensation (non bloquant)"

echo ""
echo "üéÆ D√©marrage du serveur..."
echo ""

# Lancer l'application
exec node dist/index.js
