#!/usr/bin/env node

/**
 * Script pour envoyer une notification de compensation √† tous les utilisateurs
 * Compense pour la perte de donn√©es avec 1000 berrys
 */

import Database from 'better-sqlite3';
import path from 'path';
import { fileURLToPath } from 'url';
import { v4 as uuidv4 } from 'uuid';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DB_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../data/database.sqlite');

/**
 * Envoyer la notification de compensation
 */
async function sendCompensation() {
  let db;

  try {
    console.log('üéÅ Envoi de la compensation aux utilisateurs...\n');

    // Connexion √† la base de donn√©es
    db = new Database(DB_PATH);
    db.pragma('journal_mode = WAL');

    // 1. V√©rifier si la notification de compensation existe d√©j√†
    const existingNotif = db.prepare(`
      SELECT id FROM notifications
      WHERE title = 'Cadeau de compensation'
    `).get();

    if (existingNotif) {
      console.log('‚ö†Ô∏è  Une notification de compensation existe d√©j√†');
      console.log('‚ùì Voulez-vous en cr√©er une nouvelle ? (Ctrl+C pour annuler)');
      // En production, on skip si elle existe d√©j√†
      console.log('‚úÖ Skip - notification d√©j√† envoy√©e');
      return;
    }

    // 2. R√©cup√©rer le premier admin
    const admin = db.prepare(`
      SELECT id, username FROM users WHERE is_admin = 1 LIMIT 1
    `).get();

    if (!admin) {
      console.error('‚ùå Erreur: Aucun administrateur trouv√©');
      process.exit(1);
    }

    console.log(`üë§ Admin trouv√©: ${admin.username}`);

    // 3. Cr√©er la notification
    const notificationId = uuidv4();
    const now = new Date().toISOString();

    const title = 'Cadeau de compensation';
    const message = `Chers joueurs,\n\nNous avons r√©cemment constat√© une perte de donn√©es qui a affect√© certaines collections de cartes. Nous nous excusons sinc√®rement pour ce d√©sagr√©ment.\n\nPour vous remercier de votre patience et de votre compr√©hension, nous vous offrons 1000 Berrys en guise de compensation.\n\nMerci de faire partie de notre communaut√© !\n\n- L'√©quipe One Piece Booster Game`;
    const rewardBerrys = 1000;
    const rewardBoosters = 0;

    db.prepare(`
      INSERT INTO notifications (
        id, title, message, reward_berrys, reward_boosters,
        is_active, created_by, created_at, expires_at
      ) VALUES (?, ?, ?, ?, ?, 1, ?, ?, NULL)
    `).run(
      notificationId,
      title,
      message,
      rewardBerrys,
      rewardBoosters,
      admin.id,
      now
    );

    console.log('‚úÖ Notification cr√©√©e avec succ√®s');
    console.log(`üìù ID: ${notificationId}`);
    console.log(`üí∞ R√©compense: ${rewardBerrys} Berrys`);
    console.log('');

    // 4. V√©rifier combien d'utilisateurs vont recevoir la notification
    const userCount = db.prepare(`
      SELECT COUNT(*) as count FROM users WHERE is_active = 1
    `).get();

    console.log(`üë• ${userCount.count} utilisateurs actifs recevront cette notification`);
    console.log('');

    // 5. Afficher les d√©tails de la notification
    console.log('üìã D√©tails de la notification:');
    console.log(`   Titre: ${title}`);
    console.log(`   Message: ${message.substring(0, 100)}...`);
    console.log(`   R√©compense: ${rewardBerrys} Berrys + ${rewardBoosters} Boosters`);
    console.log('');

    console.log('üéâ Compensation envoy√©e avec succ√®s !');
    console.log('üí° Les utilisateurs pourront r√©clamer leur r√©compense dans l\'onglet Notifications');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de la compensation:', error);
    process.exit(1);
  } finally {
    if (db) {
      db.close();
    }
  }
}

// Ex√©cution
sendCompensation();
