#!/usr/bin/env node

/**
 * Script de v√©rification automatique des mises √† jour des qu√™tes
 * S'ex√©cute apr√®s le d√©marrage pour confirmer que tout est bien appliqu√©
 */

const sqlite3 = require('better-sqlite3');
const fs = require('fs');
const path = require('path');

const DB_PATH = process.env.DATABASE_PATH || './data/database.sqlite';
const JSON_PATH = './config/world-map-quests.json';

console.log('üîç V√©rification des mises √† jour des qu√™tes...\n');

// V√©rifier que les fichiers existent
if (!fs.existsSync(DB_PATH)) {
  console.error('‚ùå Base de donn√©es non trouv√©e:', DB_PATH);
  process.exit(1);
}

if (!fs.existsSync(JSON_PATH)) {
  console.error('‚ùå Fichier JSON des qu√™tes non trouv√©:', JSON_PATH);
  process.exit(1);
}

try {
  // Charger le JSON
  const jsonData = JSON.parse(fs.readFileSync(JSON_PATH, 'utf-8'));
  const jsonQuests = jsonData.quests;

  console.log(`‚úÖ Fichier JSON charg√©: ${jsonQuests.length} qu√™tes`);

  // Connexion √† la DB
  const db = sqlite3(DB_PATH, { readonly: true });

  // V√©rifier quelques qu√™tes cl√©s
  const testQuests = [
    { id: 'quest_fuchsia_1', expectedReward: 50, name: 'Chercher de la viande' },
    { id: 'quest_orange_2', expectedReward: 375, name: 'Combattre Buggy' },
    { id: 'quest_syrup_2', expectedReward: 900, name: 'D√©jouer le plan de Kuro' },
    { id: 'quest_water7_2', expectedReward: 4000, name: 'Sauver Robin' }
  ];

  let allCorrect = true;
  let errors = [];

  console.log('\nüìã V√©rification des r√©compenses:');
  console.log('‚îÄ'.repeat(70));

  for (const test of testQuests) {
    const quest = db.prepare('SELECT id, name, reward_berrys FROM quests WHERE id = ?').get(test.id);

    if (!quest) {
      errors.push(`  ‚ùå ${test.id}: Qu√™te non trouv√©e en DB`);
      allCorrect = false;
      continue;
    }

    const isCorrect = quest.reward_berrys === test.expectedReward;
    const status = isCorrect ? '‚úÖ' : '‚ùå';
    const details = isCorrect
      ? `${test.expectedReward} berrys`
      : `${quest.reward_berrys} berrys (attendu: ${test.expectedReward})`;

    console.log(`${status} ${test.name.padEnd(30)} ${details}`);

    if (!isCorrect) {
      allCorrect = false;
      errors.push(`  ‚ùå ${test.id}: ${quest.reward_berrys} au lieu de ${test.expectedReward}`);
    }
  }

  console.log('‚îÄ'.repeat(70));

  // V√©rifier le total
  const totalInDb = db.prepare('SELECT COUNT(*) as count FROM quests WHERE is_active = 1').get().count;
  console.log(`\nüìä Total qu√™tes actives en DB: ${totalInDb}`);

  if (totalInDb !== jsonQuests.length) {
    console.warn(`‚ö†Ô∏è  ATTENTION: Le JSON contient ${jsonQuests.length} qu√™tes mais la DB en a ${totalInDb}`);
    allCorrect = false;
  }

  // Afficher le r√©sultat final
  console.log('\n' + '‚ïê'.repeat(70));
  if (allCorrect) {
    console.log('‚úÖ SUCC√àS: Toutes les qu√™tes sont correctement mises √† jour !');
    console.log('‚ïê'.repeat(70));
    process.exit(0);
  } else {
    console.log('‚ùå √âCHEC: Des qu√™tes n\'ont pas les bonnes valeurs');
    console.log('‚ïê'.repeat(70));
    console.log('\n‚ö†Ô∏è  Erreurs d√©tect√©es:');
    errors.forEach(err => console.log(err));
    console.log('\nüí° Solution:');
    console.log('   Ex√©cutez manuellement: node dist/scripts/migrate-quests-from-json.js');
    process.exit(1);
  }

} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  process.exit(1);
}
