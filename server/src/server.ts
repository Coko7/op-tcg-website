import dotenv from 'dotenv';
import { initializeApp, closeApp } from './app.js';

// Charger les variables d'environnement
dotenv.config();

const PORT = parseInt(process.env.PORT || '5000', 10);

async function startServer(): Promise<void> {
  try {
    const app = await initializeApp();

    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üåê Serveur d√©marr√© sur le port ${PORT}`);
      console.log(`üìç URL: http://0.0.0.0:${PORT}`);
      console.log(`üè• Health check: http://localhost:${PORT}/health`);

      if (process.env.NODE_ENV !== 'production') {
        console.log(`üîß Mode: ${process.env.NODE_ENV || 'development'}`);
        console.log(`üìö Documentation API disponible`);
      }
    });

    // Gestion propre de l'arr√™t du serveur
    const gracefulShutdown = async (signal: string) => {
      console.log(`\nüõë Signal ${signal} re√ßu, arr√™t du serveur...`);

      server.close(async (err) => {
        if (err) {
          console.error('‚ùå Erreur lors de la fermeture du serveur:', err);
          process.exit(1);
        }

        try {
          await closeApp();
          console.log('üëã Serveur arr√™t√© proprement');
          process.exit(0);
        } catch (error) {
          console.error('‚ùå Erreur lors de la fermeture:', error);
          process.exit(1);
        }
      });

      // Forcer l'arr√™t si √ßa prend trop de temps
      setTimeout(() => {
        console.error('‚è∞ Timeout lors de l\'arr√™t, fermeture forc√©e');
        process.exit(1);
      }, 10000);
    };

    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Gestion des erreurs non intercept√©es
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Exception non intercept√©e:', error);
      gracefulShutdown('UNCAUGHT_EXCEPTION');
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason, 'at:', promise);
      gracefulShutdown('UNHANDLED_REJECTION');
    });

  } catch (error) {
    console.error('‚ùå Impossible de d√©marrer le serveur:', error);
    process.exit(1);
  }
}

// D√©marrer le serveur
startServer();