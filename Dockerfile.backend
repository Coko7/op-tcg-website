# Multi-stage build pour optimiser la taille et la vitesse
FROM node:20-alpine AS builder

# Installer les dépendances système nécessaires pour la compilation
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copier les fichiers de dépendances
COPY server/package.json server/package-lock.json ./
COPY server/tsconfig.json ./

# Installer toutes les dépendances (dev + prod) pour le build
RUN npm ci --prefer-offline --no-audit

# Copier le code source
COPY server/src ./src

# Créer le dossier config et copier le fichier JSON des quêtes
RUN mkdir -p ./config
COPY server/config/world-map-quests.json ./config/world-map-quests.json

# Compiler TypeScript
RUN npm run build

# Stage de production - image finale légère
FROM node:20-alpine

# Métadonnées
LABEL maintainer="OP Game Team"
LABEL description="One Piece Booster Game - Backend API"
LABEL version="1.0.0"

# Installer uniquement les dépendances système nécessaires à l'exécution
RUN apk add --no-cache \
    curl \
    sqlite

# Créer un utilisateur non-root pour la sécurité
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

WORKDIR /app

# Copier les fichiers de dépendances
COPY --chown=nodejs:nodejs server/package.json server/package-lock.json ./

# Installer uniquement les dépendances de production
RUN npm ci --omit=dev --prefer-offline --no-audit && npm cache clean --force

# Copier le code compilé depuis le builder
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Copier les scripts JavaScript d'initialisation
COPY --chown=nodejs:nodejs server/scripts/init-achievements.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/run-migrations.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/verify-quest-updates.js ./scripts/

# Copier les scripts de maintenance (backup & nettoyage)
COPY --chown=nodejs:nodejs server/scripts/backup-database.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/log-rotation.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/send-compensation.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/make-admin.js ./scripts/
COPY --chown=nodejs:nodejs server/scripts/setup-cron-backup.sh ./scripts/
COPY --chown=nodejs:nodejs server/scripts/setup-cron-cleanup.sh ./scripts/

# Copier les scripts de correction et diagnostic de données
COPY --from=builder --chown=nodejs:nodejs /app/dist/scripts/fix-leader-rarity.js ./dist/scripts/
COPY --from=builder --chown=nodejs:nodejs /app/dist/scripts/fix-all-rarities.js ./dist/scripts/
COPY --from=builder --chown=nodejs:nodejs /app/dist/scripts/diagnose-rarity-issues.js ./dist/scripts/

# Copier le script de migration des quêtes compilé
COPY --from=builder --chown=nodejs:nodejs /app/dist/scripts/migrate-quests-from-json.js ./dist/scripts/

# Copier le fichier JSON des quêtes
COPY --from=builder --chown=nodejs:nodejs /app/config ./config

# Copier les scripts d'entrypoint
COPY --chown=nodejs:nodejs server/scripts/docker-entrypoint.sh ./scripts/
COPY --chown=nodejs:nodejs server/docker-init.sh ./
RUN chmod +x ./scripts/*.sh ./docker-init.sh

# Créer les répertoires nécessaires avec les bonnes permissions
RUN mkdir -p data backups logs public/images vegapull && \
    chown -R nodejs:nodejs /app

# Copier les données Vegapull (packs et cartes) depuis server/data/vegapull
# IMPORTANT: Copier dans /app/vegapull (PAS /app/data/vegapull) car /app/data est monté avec un volume
# Le volume écrase tout ce qui est dans /app/data, donc vegapull doit être ailleurs
COPY --chown=nodejs:nodejs server/data/vegapull ./vegapull

# Passer à l'utilisateur non-root
USER nodejs

# Exposer le port
EXPOSE 5000

# Variables d'environnement par défaut
ENV NODE_ENV=production \
    DATABASE_PATH=/app/data/database.sqlite \
    VEGAPULL_DATA_PATH=/app/vegapull \
    VEGAPULL_IMAGES_PATH=/app/public/images/cards \
    PORT=5000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1

# Commande par défaut - utiliser le script d'entrypoint
ENTRYPOINT ["/app/scripts/docker-entrypoint.sh"]